from email import message, message_from_binary_file
from hmac import new
from re import S
from aiogram import Dispatcher, Bot, types
from tg_bot.models import Chat, sessionmaker, engine, save_message_to_db
from tg_bot.services import get_user_chats, process_chat_summary
from tg_bot.keyboards import choose_chats, choose_period, choose_category
from datetime import datetime, timedelta
import pytz
from tg_bot.states import SummaryState
from aiogram.dispatcher import FSMContext


async def add_handler(message: types.Message):
    bot_obj = await message.bot.get_me()
    bot_id = bot_obj.id

    for chat_member in message.new_chat_members:
        if chat_member.id == bot_id:
            chat_id = message.chat.id
            Session = sessionmaker()
            session = Session(bind=engine)
            chat = session.query(Chat).filter(Chat.id == chat_id).all()
            if chat == []:
                try:
                    new_chat = Chat(chat_id=chat_id)
                    try:
                        await message.delete()
                    except:
                        pass
                    await message.answer(
                        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å! üòä –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª! –Ø –æ—á–µ–Ω—å —Ä–∞–¥ –±—ã—Ç—å –∑–¥–µ—Å—å!\n\n–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å? ü§î\n\n–°–æ—Å—Ç–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥.\n–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–∞—Ö ‚è∞.\n–ü–æ–¥—Å–∫–∞–∑–∞—Ç—å, —á–µ–º –º–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ üìÖ.\n–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —É—á–µ—Å—Ç—å ü§ù.\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å! üòä"
                    )
                    session.add(new_chat)
                    session.commit()
                except Exception as e:
                    print(e)
            session.close()


async def start_handler(message: types.Message):
    if message.chat.id < 0:
        return
    chats = await get_user_chats(target_user_id=message.from_user.id, bot=message.bot)
    print(chats, " - CHATS")
    if chats != []:
        keyboard = choose_chats(chats)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", reply_markup=keyboard)
    else:
        await message.answer(
            "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç. üòï\n\n–ò–ª–∏ —è –Ω–µ –º–æ–≥—É —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è  üòï –ù–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è –ø–æ–∂–∞–ª—É–π—Ç—Å—Ç–∞ –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã! –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É)"
        )
        
    await SummaryState.choosing_chat.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_message_handler(message: types.Message):
    if message.chat.id < 0:
        try:
            print(message.as_json())
            save_message_to_db(message.chat.id, message.from_user.id, message.text, f"https://t.me/{message.chat.username}/{message.message_id}")
            print("SAVE MESSAGE", message.chat.id, message.from_user.id, message.text, f"https://t.me/{message.chat.username}/{message.message_id}")
        except:
            print(message.as_json())
            save_message_to_db(message.chat.id, message.from_user.id, message.text)
            print("SAVE MESSAGE", message.chat.id, message.from_user.id, message.text)
        return
    chats = await get_user_chats(target_user_id=message.from_user.id, bot=message.bot)
    print(chats, " - CHATS")
    if chats != []:
        keyboard = choose_chats(chats)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:", reply_markup=keyboard)
    else:

        await message.answer("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ :( , –Ω–∏—á—ë –ø–æ–¥–µ–ª–∞—Ç—å –Ω–µ –º–æ–≥—É)")
        # await message.answer(
        #     "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç, –∏–ª–∏ —è –Ω–µ –º–æ–≥—É —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—èüòï\n–ù–∞–∑–Ω–∞—á—å—Ç–µ –º–µ–Ω—è –ø–æ–∂–∞–ª—É–π—Ç—Å—Ç–∞ –∞–¥–º–∏–Ω–æ–º –≥—Ä—É–ø–ø—ã! –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É)"
        # )
        
    # await SummaryState.choosing_chat.set()


async def get_messages(chat_id, start_date, bot: Bot):
    messages = []
    async for message in bot.get_chat_history(chat_id, limit=1000):
        if message.date >= start_date:
            messages.append(message.text)
        else:
            break
    return messages


async def chat_chosen_handler(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = int(callback_query.data.replace("CHAT_ID_", ""))
    await state.update_data(chat_id=chat_id)
    keyboard = choose_category()
    await callback_query.message.delete()
    await callback_query.message.answer(
        "üîπ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üé≠ü§ù‚è≥", reply_markup=keyboard
    )
    await state.set_state(SummaryState.choosing_category)


# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ----
async def category_chosen_handler(
    callback_query: types.CallbackQuery, state: FSMContext
):
    category = callback_query.data.replace("CATEGORY_", "")
    await state.update_data(category=category)
    keyboard = choose_period()
    await callback_query.message.delete()
    await callback_query.message.answer(
        "üìÖ <b>–°—É–ø–µ—Ä!</b> –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: üîúüìÜ", reply_markup=keyboard
    )
    await state.set_state(SummaryState.choosing_period)


# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ ----
async def period_chosen_handler(callback_query: types.CallbackQuery, state: FSMContext):
    period_key = callback_query.data
    periods = {
        "period_tomorrow": timedelta(days=1),
        "period_week": timedelta(days=7),
        "period_month": timedelta(days=30),
    }
    user_data = await state.get_data()
    category = user_data.get("category")
    if period_key not in periods:
        await callback_query.answer(
            "<b>‚ö†Ô∏è –û–π! –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. ‚ùå"
        )
        return
    days = period_key
    type_text = ""
    if days == "period_month":
        type_text = "–ú–µ—Å—è—Ü"
    if days == "period_week":
        type_text = "–ù–µ–¥–µ–ª—è"
    if days == "period_day":
        type_text = "–î–µ–Ω—å"
    type = category
    type2_text = "–í—Å—ë"
    if type == "deadlines":
        type2_text = "–î–µ–¥–ª–∞–π–Ω—ã"
    if type == "dosug":
        type2_text = "–î–æ—Å—É–≥"
    if type == "networking":
        type2_text = "–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥"
    
    chat_id = user_data.get("chat_id")

    start_date = datetime.now(pytz.UTC) - periods[period_key]
    await callback_query.message.delete()
    await callback_query.message.answer(
        f"üîç –ß–∞—Ç: {chat_id}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {type2_text}\nüìÖ –ü–µ—Ä–∏–æ–¥: {type_text}\n\n–°–∫–æ—Ä–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!"
    )
    result = await process_chat_summary(
        chat_id, callback_query.from_user.id, period_key, type, callback_query.bot
    )
    await state.finish()


def register_main_handlers(dp: Dispatcher):
    dp.register_message_handler(
        save_message_handler, content_types=types.ContentType.TEXT
    )
    dp.register_message_handler(add_handler, content_types=["new_chat_members"])
    dp.register_message_handler(start_handler, commands=["start"])
    dp.register_callback_query_handler(
        chat_chosen_handler,
        lambda c: c.data.startswith("CHAT_ID_"),
        state=SummaryState.choosing_chat,
    )
    dp.register_callback_query_handler(
        category_chosen_handler,
        lambda c: c.data.startswith("CATEGORY_"),
        state=SummaryState.choosing_category,
    )
    dp.register_callback_query_handler(
        period_chosen_handler,
        lambda c: c.data.startswith("period_"),
        state=SummaryState.choosing_period,
    )
