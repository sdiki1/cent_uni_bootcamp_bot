from aiogram import Dispatcher, Bot, types
from tg_bot import keyboards
from tg_bot.models import Chat, sessionmaker, engine, save_message_to_db
from tg_bot.models import create_chat
import asyncio
from tg_bot.services import get_user_chats, process_chat_summary
from tg_bot.keyboards import choose_chats, choose_period, choose_category, check_again_keyboard
from datetime import datetime, timedelta
from aiogram.utils.exceptions import MessageToDeleteNotFound, TelegramAPIError
import pytz
from typing import Optional
from tg_bot.states import SummaryState
from aiogram.dispatcher import FSMContext
import logging

logger = logging.getLogger(__name__)




async def chat_chosen_handler(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = int(callback_query.data.replace("CHAT_ID_", ""))
    await state.update_data(chat_id=chat_id)
    keyboard = choose_category()
    await callback_query.message.delete()
    await callback_query.message.answer(
        "üîπ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: üé≠ü§ù‚è≥", reply_markup=keyboard
    )
    await state.set_state(SummaryState.choosing_category)


# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ----
async def category_chosen_handler(
    callback_query: types.CallbackQuery, state: FSMContext
):
    category = callback_query.data.replace("CATEGORY_", "")
    await state.update_data(category=category)
    keyboard = choose_period()
    await callback_query.message.delete()
    await callback_query.message.answer(
        "üìÖ <b>–°—É–ø–µ—Ä!</b> –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: üîúüìÜ", reply_markup=keyboard
    )
    await state.set_state(SummaryState.choosing_period)


# ---- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ ----
async def period_chosen_handler(callback_query: types.CallbackQuery, state: FSMContext):
    period_key = callback_query.data
    periods = {
        "period_tomorrow": timedelta(days=1),
        "period_week": timedelta(days=7),
        "period_month": timedelta(days=30),
    }
    user_data = await state.get_data()
    category = user_data.get("category")
    if period_key not in periods:
        await callback_query.answer(
            "<b>‚ö†Ô∏è –û–π! –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. ‚ùå"
        )
        return
    days = period_key
    type_text = ""
    if days == "period_month":
        type_text = "–ú–µ—Å—è—Ü"
    if days == "period_week":
        type_text = "–ù–µ–¥–µ–ª—è"
    if days == "period_day":
        type_text = "–î–µ–Ω—å"
    type = category
    type2_text = "–í—Å—ë"
    if type == "deadlines":
        type2_text = "–î–µ–¥–ª–∞–π–Ω—ã"
    if type == "dosug":
        type2_text = "–î–æ—Å—É–≥"
    if type == "networking":
        type2_text = "–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥"
    
    chat_id = user_data.get("chat_id")

    start_date = datetime.now(pytz.UTC) - periods[period_key]
    await callback_query.message.delete()
    await callback_query.message.answer(
        f"üîç –ß–∞—Ç: {chat_id}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {type2_text}\nüìÖ –ü–µ—Ä–∏–æ–¥: {type_text}\n\n–°–∫–æ—Ä–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!"
    )
    result = await process_chat_summary(
        chat_id, callback_query.from_user.id, period_key, type, callback_query.bot
    )
    await state.finish()

async def help_adding_handler(callback: types.CallbackQuery):
    
    help_text = (
        "üõ† <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç:</b>\n\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞'\n"
        "3. –ù–∞–π–¥–∏—Ç–µ @username_–±–æ—Ç–∞\n"
        "4. –ù–∞–∑–Ω–∞—á—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n"
        "‚úÖ –ü–æ—Å–ª–µ —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ!"
    )
    keyboard = check_again_keyboard()
    await callback.message.answer(help_text, reply_markup=keyboard)
    await callback.message.delete()

def register_main_handlers(dp: Dispatcher):

    dp.register_callback_query_handler(
        chat_chosen_handler,
        lambda c: c.data.startswith("CHAT_ID_"),
        state=SummaryState.choosing_chat,
    )
    dp.register_callback_query_handler(
        category_chosen_handler,
        lambda c: c.data.startswith("CATEGORY_"),
        state=SummaryState.choosing_category,
    )
    dp.register_callback_query_handler(
        period_chosen_handler,
        lambda c: c.data.startswith("period_"),
        state=SummaryState.choosing_period,
    )
    dp.register_callback_query_handler(help_adding_handler, text="HELP_ADDING_TO_CHAT")
    dp.register_callback_query_handler(help_adding_handler, text="HELP_ADDING_TO_CHAT", state="*")
