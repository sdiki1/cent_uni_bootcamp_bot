from pydoc import text
import stat
from aiogram import types, Dispatcher
from tg_bot.models import save_message_to_db
from tg_bot.models import create_chat
import asyncio
from tg_bot.services import get_user_chats
from tg_bot.keyboards import choose_chats, get_help_markup, choose_category, generate_chats_keyboard
from datetime import datetime, timedelta
from aiogram.utils.exceptions import MessageToDeleteNotFound, TelegramAPIError
from typing import Optional
from aiogram.dispatcher import FSMContext
from tg_bot.states import SummaryState
import logging

logger = logging.getLogger(__name__)


async def add_handler(message: types.Message):
    bot = message.bot
    bot_id = (await bot.get_me()).id
    new_members = message.new_chat_members
    
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å! üòä –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª! "
        "–Ø –æ—á–µ–Ω—å —Ä–∞–¥ –±—ã—Ç—å –∑–¥–µ—Å—å!\n\n–ß—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å? ü§î\n\n"
        "- –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥\n"
        "- –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–∞—Ö ‚è∞\n"
        "- –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å, —á–µ–º –º–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ üìÖ\n"
        "- –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö ü§ù\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å - –∏ —è –ø–æ–º–æ–≥—É!"
    )
    if any(member.id == bot_id for member in new_members):
        chat_id = message.chat.id
        
        try:
            if create_chat(chat_id):
                await asyncio.gather(
                    message.answer(welcome_text)
                )
            else:
                logger.info(f"–ë–æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        except MessageToDeleteNotFound:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
        except TelegramAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ —á–∞—Ç–µ {chat_id}: {e}")
        except Exception as e:
            logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ {chat_id}:")


async def save_message_handler(message: types.Message) -> None:
    try:
        if message.chat.id > 0:
            await handle_private_chat(message)
            return

        if not await process_group_message(message):
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {message.chat.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await handle_error(message)

async def handle_private_chat(message: types.Message) -> None:
    await message.answer(
        "‚ö†Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Ç—É –∫–æ–º–∞–Ω–¥—É. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /start\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É\n"
        "2. –í—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "3. –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ"
    )

async def process_group_message(message: types.Message) -> bool:
    message_link = generate_message_link(message)
    message_text = message.text or ""

    try:
        save_message_to_db(
            chat_id=message.chat.id,
            user_id=message.from_user.id,
            message_text=message_text,
            link=message_link
        )
        
        log_message_details(message, message_link)
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}", exc_info=True)
        return False

def generate_message_link(message: types.Message) -> Optional[str]:
    try:
        if message.chat.username:
            return f"https://t.me/{message.chat.username}/{message.message_id}"
        return None
    except AttributeError:
        logger.warning(f"–ß–∞—Ç {message.chat.id} –Ω–µ –∏–º–µ–µ—Ç username")
        return None

def log_message_details(message: types.Message, link: Optional[str]) -> None:
    log_data = {
        "chat_id": message.chat.id,
        "user_id": message.from_user.id,
        "message_id": message.message_id,
        "text": message.text,
        "link": link
    }
    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s", log_data)

async def handle_error(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
    error_text = (
        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )
    
    try:
        await message.answer(error_text)
    except TelegramAPIError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(e)}")


async def start_handler(message: types.Message, state: FSMContext, user_id: int = None):
    welcome_text = (
        "üëã *–ü—Ä–∏–≤–µ—Ç, {user_name}!*\n\n"
        "–Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìù *–î–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏* –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∑–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥\n"
        "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö* –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n"
        "üìÖ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏* –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü\n"
        "ü§ù *–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n\n"
        "–í—ã–±–µ—Ä–∏ —á–∞—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
    ).format(user_name=message.from_user.full_name)

    no_chats_text = (
        "üò¢ *–£–ø—Å! –ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç.*\n\n"
        "–ß—Ç–æ–±—ã —è —Å–º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å, —Å–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤:\n\n"
        "1. üëâ –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª\n"
        "2. üëë –ù–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "3. üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º!"
    )

    if message.chat.id < 0:
        return
    
    target_user = user_id or message.from_user.id
    chats = await get_user_chats(target_user_id=target_user, bot=message.bot)
    async with state.proxy() as data:
        data['selected_chats'] = data.get('selected_chats', [])
        
        if len(chats) == 1:
            data['selected_chats'] = chats
            await show_category_selection(message, chats, state)
            return

        if chats:
            keyboard = await generate_chats_keyboard(chats, data['selected_chats'])
            try:
                await message.edit_text(welcome_text, parse_mode="Markdown", reply_markup=keyboard)
            except:
                await message.answer(welcome_text, parse_mode="Markdown", reply_markup=keyboard)
        else:
            keyboard = get_help_markup()
            try:
                await message.edit_text(no_chats_text, parse_mode="Markdown", reply_markup=keyboard)
            except:
                await message.answer(no_chats_text, parse_mode="Markdown", reply_markup=keyboard)
    
    await SummaryState.choosing_chats.set()
    
async def show_category_selection(message: types.Message, chats, state: FSMContext):
    keyboard = choose_category()
    welcome_text = (
        "üëã *–ü—Ä–∏–≤–µ—Ç, {user_name}!*\n\n"
        "–Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìù *–î–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–∂–∏–º–∫–∏* –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∑–∞ –ª—é–±–æ–π –ø–µ—Ä–∏–æ–¥\n"
        "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö* –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n"
        "üìÖ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏* –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü\n"
        "ü§ù *–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n\n"
    ).format(user_name=message.from_user.full_name)
  
    selected_chats = chats
    chat_count = len(selected_chats)
    chat_text = "—á–∞—Ç" if chat_count == 1 else "—á–∞—Ç–∞" if 2 <= chat_count <= 4 else "—á–∞—Ç–æ–≤"
    async with state.proxy() as data:
        data['selected_chats'] = selected_chats[0]["chat_id"]
    
    text = welcome_text + (
        f"–£ –í–∞—Å –µ—Å—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —á–∞—Ç: *{selected_chats[0]['title']}*\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )
    
    try:
        await message.edit_text(text, reply_markup=keyboard)
    except:
        await message.answer(text, reply_markup=keyboard)

    await SummaryState.choosing_category.set()

async def start_query_handler(callback: types.CallbackQuery, state: FSMContext):
    return await start_handler(callback.message, state, callback.from_user.id)

def register_start_handlers(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=["start"])
    dp.register_message_handler(start_handler, commands=["start"], state="*")
    dp.register_callback_query_handler(start_query_handler, text="CHECK_BOT")
    dp.register_callback_query_handler(start_query_handler, text="CHECK_BOT", state="*")
    dp.register_message_handler(save_message_handler, content_types=types.ContentType.TEXT)
    dp.register_message_handler(add_handler, content_types=["new_chat_members"])
    
    