import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from datetime import datetime, timedelta
import pytz
from sqlalchemy import select, and_
from sqlalchemy.orm import sessionmaker
from tg_bot.models import engine, Message
from yandex_cloud_ml_sdk import YCloudML
import time
import requests
import os

TOKEN = os.getenv("TOKEN")
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")

sdk = YCloudML(folder_id=YANDEX_FOLDER_ID, auth=YANDEX_API_KEY)


async def get_chat_history(chat_id: int) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    messages = []
    try:
        Session = sessionmaker()
        session = Session(bind=engine)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = (
            session.query(Message)
            .filter(Message.chat_id == chat_id)
            .filter(Message.timestamp)
            .all()
        )
        messages = [{"text": msg.message_text, "date": msg.timestamp} for msg in result]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    finally:
        session.close()

    return messages


async def yandex_gpt_summarize(text: str, type_text: str, type2_text: str) -> str:
    folder_id = YANDEX_FOLDER_ID
    api_key = YANDEX_API_KEY
    gpt_model = "yandexgpt-lite"

    system_prompt = f"–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ —Ç–æ—á–Ω—ã–µ {type2_text}, —É–∫–∞–∑–∞–≤ –≤ –æ—Ç–≤–µ—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö. –í–ê–ñ–ù–û!: –ï–°–õ–ò –î–ê–¢–ê –ù–ï –°–û–í–ü–ê–î–ê–ï–¢ –° –ü–†–û–ú–ï–ñ–£–¢–ö–û–ú, –ï–Å –£–ö–ê–ó–´–í–ê–¢–¨ –ù–ï –ù–£–ñ–ù–û, –ï–°–õ–ò –ù–ò–ß–ï–ì–û –ù–ï–¢, –¢–û –û–¢–í–ï–¢–¨ –ü–£–°–¢–´–ú –û–¢–í–ï–¢–û–ú {type2_text} –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è (07.02.2025) –≤ —Ç–µ—á–µ–Ω–∏–µ 1 {type_text}.–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:\n–î–∞—Ç–∞: [–¥–∞—Ç–∞]\n–û–ø–∏—Å–∞–Ω–∏–µ: [–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏]\n–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ): [–≤—Ä–µ–º—è]\n–¢–µ–ø–µ—Ä—å —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π. –ò–∑–≤–ª–µ–∫–∏ –∏–∑ –Ω–∏—Ö —Ç–æ—á–Ω—ã–µ {type2_text} —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º (–µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã), —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –ø—Ä–æ–º–µ–∂—É—Ç–∫—É."
    user_prompt = text
    print(user_prompt)
    body = {
        "modelUri": f"gpt://{folder_id}/{gpt_model}",
        "completionOptions": {"stream": False, "temperature": 0.3, "maxTokens": 2000},
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": user_prompt},
        ],
    }
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completionAsync"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Api-Key {api_key}",
    }

    response = requests.post(url, headers=headers, json=body)
    operation_id = response.json().get("id")

    url = f"https://llm.api.cloud.yandex.net:443/operations/{operation_id}"
    headers = {"Authorization": f"Api-Key {api_key}"}

    while True:
        response = requests.get(url, headers=headers)
        print(response.json())
        done = response.json()["done"]
        if done:
            break
        time.sleep(2)

    data = response.json()
    answer = data["response"]["alternatives"][0]["message"]["text"]
    print(answer, "ANSWERRR")
    return answer


async def summarize_messages(
    messages: list, type_text: str, type2_text: str, batch_size: int = 50
) -> str:
    summaries = []
    for i in range(0, len(messages), batch_size):
        batch = messages[i : i + batch_size]
        batch_text = "\n".join([msg["text"] for msg in batch])
        summary = await yandex_gpt_summarize(batch_text, type_text, type2_text)
        summaries.append(summary)
        await asyncio.sleep(1)

    final_text = "\n".join(summaries)
    return await yandex_gpt_summarize(final_text, type_text, type2_text)


async def process_chat_summary(
    chat_id: int, user_id: int, days: str, type: str, bot: Bot
):
    try:
        type_text = ""
        if days == "period_month":
            type_text = "–ú–µ—Å—è—Ü–∞"
        if days == "period_week":
            type_text = "–ù–µ–¥–µ–ª–∏"
        if days == "period_day":
            type_text = "–î–Ω—è"

        type2_text = "–í—Å—ë"
        if type == "deadlines":
            type2_text = "–î–ï–î–õ–ê–ô–ù–´"
        if type == "dosug":
            type2_text = "–ü–†–û–í–ï–î–ï–ù–ò–ï –î–û–°–£–ì–ê"
        if type == "networking":
            type2_text = "–ù–ï–¢–í–û–†–ö–ò–ù–ì–ò"
        print('\n\n\n', type2_text, type, '\n\n\n')
        message = await bot.send_message(
            user_id, f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {type_text}..."
        )

        messages = await get_chat_history(chat_id)
        if not messages:
            await bot.send_message(
                user_id, "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
            return
        summary = await summarize_messages(messages, type_text, type2_text)

        print(summary)
        await bot.send_message(user_id, f"üìä –ò—Ç–æ–≥–æ–≤–∞—è –≤—ã–∂–∏–º–∫–∞:\n\n{summary[:4080]}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
