import asyncio
import re
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from datetime import datetime, timedelta
import pytz
from sqlalchemy import select
from sqlalchemy.orm import sessionmaker
from tg_bot.models import engine, Message
from yandex_cloud_ml_sdk import YCloudML
import time
import requests
import os

TOKEN = os.getenv("TOKEN")
# YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
# YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
YANDEX_FOLDER_ID = "b1gug7c74crq38i2spt2"
YANDEX_API_KEY = "AQVN2VdnEpiYARjmZXK4bO4GYyeeIdPqcNba3pGY"
# print(YANDEX_FOLDER_ID, YANDEX_API_KEY)
sdk = YCloudML(folder_id=YANDEX_FOLDER_ID, auth=YANDEX_API_KEY)
def check_data(i, today_date, type_text):

    days = int(type_text)
    
    date_match = re.search(r'\*\*–î–∞—Ç–∞\*\*: (\d{2}\.\d{2}\.\d{4})', i)
    if not date_match:
        return i
    event_date = datetime.strptime(date_match.group(1), "%d.%m.%Y")
    today = datetime.strptime(today_date, "%d.%m.%Y")
    min_date = today
    max_date = today + timedelta(days=days) 
    if min_date <= event_date <= max_date:
        return i
    else:
        return ""
    
def remove_first_line(i):
    lines = i.split("\n")
    if len(lines) > 1:
        return "\n".join(lines[1:])
    else:
        return i
    


async def get_chat_history(chat_id: int) -> list:
    try:
        session = sessionmaker(bind=engine)()
        result = session.query(Message).filter(Message.chat_id == chat_id).all()
        return [
            {"text": msg.message_text, "date": msg.timestamp, "link": msg.link}
            for msg in result
        ]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []
    finally:
        session.close()

async def yandex_gpt_summarize(text: str, user_prompt: str, message: types.Message=None, percent=None) -> str:
    today_date = datetime.now(pytz.timezone("Europe/Moscow")).strftime("%d.%m.%Y")
    system_prompt = ( 
        "!–ó–ê–ú–ï–ù–ò –í–°–ï –ú–ê–¢–ù–´–ï –ò –ù–ï–¶–ï–ù–ó–£–†–ù–´–ï –°–õ–û–í–ê –ù–ê ********"
        "!–ó–ê–ú–ï–ù–ò –í–°–ï –†–ï–ê–õ–¨–ù–´–ï –ò–ú–ï–ù–ê, –ù–ê–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ò –°–¢–†–ê–ù–´ –ù–ê ******"
        "!–ï–°–õ–ò –ß–¢–û-–¢–û –ù–ï –£–°–¢–†–ê–ò–í–ê–ï–¢ –í –ó–ê–ü–†–û–°–ï, –ó–ê–ú–ï–ù–ò –ù–ê *****"
        "–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞. "
        "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
        "–ß–∞—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞, –≥–¥–µ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—Å—Ç, –¥–∞—Ç—É –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª.\n\n"
        "**–¢–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:**\n"
        "1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "2. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏.\n"
        "3. –í—ã–ø–æ–ª–Ω–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –≤—Å–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        "4. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, —Å—Ñ–æ—Ä–º–∏—Ä—É–π –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞.\n\n"
    )
    user_prompt = (
        "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        f"{user_prompt}\n"
        "C–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [text] - [date] - [link]"
        f"{text}"
    )

    body = {
        "modelUri": f"gpt://{YANDEX_FOLDER_ID}/yandexgpt-32k/rc",
        "completionOptions": {"stream": False, "temperature": 0.1, "maxTokens": 2000000},
        "messages": [
            {"role": "system", "text": system_prompt},
            {"role": "user", "text": user_prompt},
        ],
    }
    
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completionAsync"
    headers = {"Content-Type": "application/json", "Authorization": f"Api-Key {YANDEX_API_KEY}"}
    response = requests.post(url, headers=headers, json=body)
    print(response)
    operation_id = response.json().get("id")
    if message:
        await message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {percent}%")
    
    while True:
        response = requests.get(f"https://llm.api.cloud.yandex.net:443/operations/{operation_id}", headers=headers)
        if response.json().get("done"):
            break
        time.sleep(0.5)
    data = response.json()["response"]["alternatives"][0]["message"]["text"].split("\n\n")
    text = ""
    for i in data:
        l = False
        if "**–°—Å—ã–ª–∫–∞**: None" in i:
            l = True
            text += i.replace("**–°—Å—ã–ª–∫–∞**: None", "") + "\n\n"
        else:
            text += str(i) + "\n\n"
    return text

async def summarize_messages(messages: list, user_prompt: str, max_percent: int, percent_now:int, message: types.Message, batch_size: int = 50) -> str:
    unique_messages = []
    seen_texts = set() 

    for msg in messages:
        if msg["text"] not in seen_texts:
            unique_messages.append(msg)
            seen_texts.add(msg["text"])
    all_text = "\n".join([f'[{msg["text"]}] - [{msg["date"]}] - [{msg["link"]}]' for msg in unique_messages])
    progress = (max_percent + percent_now*2)//3
    await message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {progress}%")
    progress = (max_percent*2 + percent_now)//3
    summary = await yandex_gpt_summarize(all_text, user_prompt, message, progress)
    
    return summary

async def process_chat_summary_user_prompt(chats: list[int], user_prompt: str, bot: Bot, message: types.Message):


    # await message.edit_reply_markup()
    message = await message.answer(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ...")
    summaries = []
    total_chats = len(chats)
    
    for index, chat_id in enumerate(chats, start=1):
        messages = await get_chat_history(chat_id)
        if messages:
            max_percent = (index / total_chats) * 100
            percent_now = ((index-1) / total_chats) * 100
            summary = await summarize_messages(messages, user_prompt, max_percent, percent_now, message)
            if summary.strip():
                summaries.append(summary)
        progress = round((index / total_chats) * 100)
        await message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {progress}%")
    
    if summaries:
        final_summary = "\n------------------------------\n".join(summaries)
        await message.edit_text(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è –≤—ã–∂–∏–º–∫–∞:\n\n{final_summary}")
    else:
        await message.edit_text("üìä –ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")

